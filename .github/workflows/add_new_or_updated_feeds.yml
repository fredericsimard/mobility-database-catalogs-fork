name: Add new or updated feeds

on:
  push:
    branches: [ main ]

# on:
#     schedule:
#         - cron: '0 0 * * *' # At 00:00 UTC every day


env:
    DATE_FORMAT: "[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}|[0-9]{4}-[0-9]{2}-[0-9]{2}" # this is the format we need to compare dates in the CSV and the local system.
    USERNAME: "github-actions[bot]" # GitHub username that will create the PR
    USERNAME_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
    #ACCESS_TOKEN: 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 # The access token associated with the USERNAME above, should have "repo" scope to access the repositories. See "CREATE_PR_FOR_MB_CATALOG_AUTOMATION" in 1Password, Public Transit vault.
    ORGANIZATION: MobilityData # organization name
    REPO: mobity-database-catalogs # repository name
    REVIEWERS_JSON: "[\"emmambd\"]" # List of GitHub usernames of the reviewers, in a JSON array : ["username1", "username2"]
    
    PYTHON_SCRIPT_PATH: "tools/operations.py" # full path of where the Python script is located.
    PYTHON_BRIDGE_SCRIPT_PATH: "/root/python_bridge_script.py" # full path of where the Python bridge script is located.
    LOCAL_REPO_PATH_AKA_ROOT: "/root/mobility-database-catalogs/"
    SOURCE_CATALOG_PATH_FROM_ROOT: "catalogs/source"

    GTFS_SCHEDULE_CATALOG_PATH_FROM_ROOT: "catalogs/sources/gtfs/schedule/"
    GTFS_REALTIME_CATALOG_PATH_FROM_ROOT: "catalogs/sources/gtfs/realtime/"
    GTFS_SCHEDULE_CATALOG_PATH: "gtfs/schedule/"
    GTFS_REALTIME_CATALOG_PATH: "gtfs/realtime/"

jobs:
  add-new-updated-feeds:
    runs-on: ubuntu-latest
    steps:
      - name: setup global vars
        id: global_vars
        run: |
            echo "TODAYS_DATE=$(date +%m/%d/%Y)" >> $GITHUB_ENV # Ex.: 07/27/2023
            echo "TODAYS_DAY=$(date '+%d')" >> $GITHUB_ENV # Ex.: 27
            echo "TODAYS_MONTH=$(date '+%m')" >> $GITHUB_ENV # Ex.: 07
            echo "TODAYS_YEAR=$(date '+%Y')" >> $GITHUB_ENV # Ex.: 2023
            echo "BRANCH=\"${{ env.TODAYS_YEAR }}-${{ env.TODAYS_MONTH }}-${{ env.TODAYS_DAY }}\"" >> $GITHUB_ENV # Branch name

      - name: Load secret
        id: onepw_secrets
        uses: 1password/load-secrets-action@v1
        with:
            export-env: true # Export loaded secrets as environment variables
        env:
            OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
            SECRET: "op://rbiv7rvkkrsdlpcrz3bmv7nmcu/zmccajmekpljwy5udft22g5iby/credential"
            CREDENTIALS: "op://rbiv7rvkkrsdlpcrz3bmv7nmcu/ifkeehu5gzi7wy5ub5qvwkaire/credential"
            # op://<vault>/<item>[/<section>]/<field>  â€” Or right-click on the field and select copy secret reference

      - name: Checkout repo
        id: checkout_repo
        uses: actions/checkout@v4
        with:
            ref: main
            fetch-depth: 0
            token: ${{ env.CREDENTIALS }} 

      - name: Set up Git
        id: git-setup
        run: |
            git config user.name ${{ env.USERNAME }}
            git config user.email ${{ env.USERNAME_EMAIL }}

      - name: Setup Python
        uses: actions/setup-python@v4.7.0
        with:
          python-version: '3.11' # install the python version needed

      - name: Install python packages
        run: |
            python -m pip install --upgrade pip
            pip install virtualenv
            pip install gtfs_kit
            pip install unidecode

      - name: Download CSV from Google Sheets
        id: csv
        run: |
            CSV_DATA=$(wget -qO- "https://docs.google.com/spreadsheets/d/1Q96KDppKsn2khdrkraZCQ7T_qRSfwj7WsvqXvuMt4Bc/export?format=csv")

            # Convert the multi-line CSV data to an array of lines
            IFS=$'\n'
            csv_data_no_headers=$(awk 'NR>1' <<< "${CSV_DATA}")
            read -rd '' -a csv_lines <<< "$csv_data_no_headers"
            echo "CSV_LINES=${csv_lines}" >> $GITHUB_ENV # call ${{ env.CSV_LINES }}

      - name: Process each lines
        id: process-csv
        run: |
            # function to extract a date in the proper format for this script.
            extract_date() {
                # USAGE : date=$(extract_date "7/5/2023 15:50:58")
                #         echo "Extracted date: $date"
                local text="$1"
                local extracted_date=$(echo "$text" | grep -oE "${{ env.DATE_FORMAT }}" | head -1)
                
                if [[ $extracted_date =~ [0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
                    # Convert "yyyy-mm-dd" to "mm/dd/yyyy"
                    formatted_date=$(printf "%s" "$extracted_date" | awk -F"-" '{printf "%02d/%02d/%s", $2, $3, $1}')
                else
                    # Convert "m/d/yyyy" to "mm/dd/yyyy"
                    formatted_date=$(printf "%s" "$extracted_date" | awk -F"/" '{printf "%02d/%02d/%s", $1, $2, $3}')
                fi
            
                echo "$formatted_date"
            }

            lines=${{ env.CSV_LINES }}
            for line in "${lines[@]}"; do
                IFS=',' read -r timestamp provider regioncity currenturl updatednewsourceurl datatype1 issuetype downloadurl country subdivision_name municipality name yournameorg license_url tripupdatesurl servicealertsurl genunknownrturl authentication_type
                
                # We need to extract a date from the first column to test against today's date.
                DATE_FROM_CSV=$(extract_date $timestamp)

                if [[ "$DATE_FROM_CSV" = "${{ env.TODAYS_DATE }}" ]]
                    then # ...the row has been added today, process it.
                        echo -e "FOUND ONE ROW ADDED TODAY: $provider"
                        # Default values for variables
                        PYTHON_SCRIPT_ARGS=""
                        PYTHON_SCRIPT_OUTPUT=""

                        # Create the argument string to send to the Python script
                        if [[ $issuetype = "New source" ]]
                        then
                            echo -e "   NEW SOURCE"

                            if [[ $datatype1 = *"Schedule"* ]]
                            then # add_gtfs_schedule_source

                                PYTHON_SCRIPT_ARGS="add_gtfs_schedule_source(\
                                provider=\"$provider\", \
                                country_code=\"$country\", \
                                direct_download_url=\"$tripupdatesurl\", \
                                authentication_type=\"$authentication_type\", \
                                authentication_info_url=\"$authentication_info_url\", \
                                api_key_parameter_name=\"$api_key_parameter_name\", \
                                subdivision_name=\"$subdivision_name\", \
                                municipality=\"$municipality\", \
                                license_url=\"$license_url\", \
                                name=\"$name\", \
                                status=\"$status1\", \
                                features=\"$features1\")"

                            elif [[ $datatype1 = *"Realtime"* ]]
                            then # add_gtfs_realtime_source
                                # Emma: entity_type matches the realtime Data type options of Vehicle Positions, Trip Updates, or Service Alerts.
                                # If one of those three are selected, add it. If not, omit it.

                                PYTHON_SCRIPT_ARGS="add_gtfs_realtime_source(\
                                entity_type=\"$datatype1\", \
                                provider=\"$provider\", \
                                direct_download_url=\"$tripupdatesurl\", \
                                authentication_type=\"$authentication_type\", \
                                authentication_info_url=\"$authentication_info_url\", \
                                api_key_parameter_name=\"$api_key_parameter_name\", \
                                license_url=\"$license_url\", \
                                name=\"$name\", \
                                static_reference=\"\", \
                                note=\"$note\", \
                                status=\"$status2\", \
                                features=\"$features2\")"
                            fi

                        elif [[ $issuetype = "Source update" ]]
                        then
                            echo -e "   SOURCE UPDATE"

                            if [[ $datatype1 = *"Schedule"* ]]
                            then # update_gtfs_schedule_source

                                PYTHON_SCRIPT_ARGS="update_gtfs_schedule_source(\
                                mdb_source_id=\"\", \
                                provider=\"$provider\", \
                                name=\"$name\", \
                                country_code=\"$country\", \
                                subdivision_name=\"$subdivision_name\", \
                                municipality=\"$municipality\", \
                                direct_download_url=\"$tripupdatesurl\", \
                                authentication_type=\"$authentication_type\", \
                                authentication_info_url=\"$authentication_info_url\", \
                                api_key_parameter_name=\"$api_key_parameter_name\", \
                                license_url=\"$license_url\", \
                                status=\"$status1\", \
                                features=\"$features1\")"

                            elif [[ $datatype1 = *"Realtime"* ]]
                            then # update_gtfs_realtime_source

                                PYTHON_SCRIPT_ARGS="update_gtfs_realtime_source(\
                                mdb_source_id=\"\", \
                                entity_type=\"$datatype1\", \
                                provider=\"$provider\", \
                                direct_download_url=\"$tripupdatesurl\", \
                                authentication_type=\"$authentication_type\", \
                                authentication_info_url=\"$authentication_info_url\", \
                                api_key_parameter_name=\"$api_key_parameter_name\", \
                                license_url=\"$license_url\", \
                                name=\"$name\", \
                                static_reference=\"TO_BE_PROVIDED\", \
                                note=\"$note\", \
                                status=\"$status2\", \
                                features=\"$features2\")"

                            fi

                        elif [[ $issuetype = *"removed"* ]]
                        then
                            echo -e "   REMOVING SOURCE"

                            # Emma: It's very rarely selected. In those cases, you could just update the name field of the feed "requested for removal" and I can decide what to do with it manually.

                                if [[ $datatype1 = *"Schedule"* ]]
                                then # update_gtfs_schedule_source

                                    PYTHON_SCRIPT_ARGS="update_gtfs_schedule_source(\
                                    mdb_source_id=\"\", \
                                    provider=\"$provider\", \
                                    name=\"**** Requested for removal ****\", \
                                    country_code=\"$country\", \
                                    subdivision_name=\"$subdivision_name\", \
                                    municipality=\"$municipality\", \
                                    direct_download_url=\"$tripupdatesurl\", \
                                    authentication_type=\"$authentication_type\", \
                                    authentication_info_url=\"$authentication_info_url\", \
                                    api_key_parameter_name=\"$api_key_parameter_name\", \
                                    license_url=\"$license_url\", \
                                    status=\"$status1\", \
                                    features=\"$features1\")"

                                elif [[ $datatype1 = *"Realtime"* ]]
                                then # update_gtfs_realtime_source

                                    PYTHON_SCRIPT_ARGS="update_gtfs_realtime_source(\
                                    mdb_source_id=\"\", \
                                    entity_type=\"$datatype1\", \
                                    provider=\"$provider\", \
                                    direct_download_url=\"$tripupdatesurl\", \
                                    authentication_type=\"$authentication_type\", \
                                    authentication_info_url=\"$authentication_info_url\", \
                                    api_key_parameter_name=\"$api_key_parameter_name\", \
                                    license_url=\"$license_url\", \
                                    name=\"**** Requested for removal ****\", \
                                    static_reference=\"TO_BE_PROVIDED\", \
                                    note=\"$note\", \
                                    status=\"$status2\", \
                                    features=\"$features2\")"

                                fi

                        else # ... assume this is a new source by default :: add_gtfs_schedule_source
                            echo -e "   ASSUMING DEFAULT, NEW SOURCE"

                            PYTHON_SCRIPT_ARGS="add_gtfs_schedule_source(\
                            provider=\"$provider\", \
                            country_code=\"$country\", \
                            direct_download_url=\"$tripupdatesurl\", \
                            authentication_type=\"$authentication_type\", \
                            authentication_info_url=\"$authentication_info_url\", \
                            api_key_parameter_name=\"$api_key_parameter_name\", \
                            subdivision_name=\"$subdivision_name\", \
                            municipality=\"$municipality\", \
                            license_url=\"$license_url\", \
                            name=\"$name\", \
                            status=\"$status1\", \
                            features=\"$features1\")"

                        fi

                        

                # Activate the Python virtual environment
                    fi # END ...the row has been added today, process it.

            done # end loop

            echo "PYTHON_SCRIPT_ARGS=${PYTHON_SCRIPT_ARGS}" >> $GITHUB_OUTPUT

      - name: Create and activate a Python virtual environment
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        run: |
          python -m venv env
          source env/bin/activate
          pip install virtualenv
          pip install gtfs_kit
          pip install unidecode

      - name: Run Python Script
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        run: |
          python -c "from tools.operations import *; ${{ steps.process-csv.outputs.PYTHON_SCRIPT_ARGS }}"

      - name: Deactivate virtual environment
        run: |
          deactivate