name: Add new or updated feeds

on:
  push:
    branches: [ main ]

# on:
#     schedule:
#         - cron: '0 0 * * *' # At 00:00 UTC every day

env:
    DATE_FORMAT: "[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}|[0-9]{4}-[0-9]{2}-[0-9]{2}" # this is the format we need to compare dates in the CSV and the local system.
    USERNAME: "github-actions[bot]" # GitHub username that will create the PR
    USERNAME_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
    #ACCESS_TOKEN: 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 # The access token associated with the USERNAME above, should have "repo" scope to access the repositories. See "CREATE_PR_FOR_MB_CATALOG_AUTOMATION" in 1Password, Public Transit vault.
    ORGANIZATION: MobilityData # organization name
    REPO: mobity-database-catalogs # repository name
    BASE: "main"
    REVIEWERS_JSON: "[\"emmambd\"]" # List of GitHub usernames of the reviewers, in a JSON array : ["username1", "username2"]
    
    PYTHON_SCRIPT_PATH: "tools/operations.py" # full path of where the Python script is located.
    PYTHON_BRIDGE_SCRIPT_PATH: "/root/python_bridge_script.py" # full path of where the Python bridge script is located.
    LOCAL_REPO_PATH_AKA_ROOT: "/root/mobility-database-catalogs/"
    SOURCE_CATALOG_PATH_FROM_ROOT: "catalogs/source"

    GTFS_SCHEDULE_CATALOG_PATH_FROM_ROOT: "catalogs/sources/gtfs/schedule/"
    GTFS_REALTIME_CATALOG_PATH_FROM_ROOT: "catalogs/sources/gtfs/realtime/"
    GTFS_SCHEDULE_CATALOG_PATH: "gtfs/schedule/"
    GTFS_REALTIME_CATALOG_PATH: "gtfs/realtime/"

jobs:
  add-new-updated-feeds:
    runs-on: ubuntu-latest
    steps:
      - name: Setup global variables
        id: global_vars
        run: |
            echo "TODAYS_DATE=$(date +%m/%d/%Y)" >> $GITHUB_ENV # Ex.: 07/27/2023
            echo "TODAYS_DAY=$(date '+%d')" >> $GITHUB_ENV # Ex.: 27
            echo "TODAYS_MONTH=$(date '+%m')" >> $GITHUB_ENV # Ex.: 07
            echo "TODAYS_YEAR=$(date '+%Y')" >> $GITHUB_ENV # Ex.: 2023

      - name: Create branch name
        id: create_branch_name
        run: |
            echo "BRANCH=\"${{ env.TODAYS_YEAR }}-${{ env.TODAYS_MONTH }}-${{ env.TODAYS_DAY }}\"" >> $GITHUB_ENV # Branch name

      - name: Load secrets from 1Password
        id: onepw_secrets
        uses: 1password/load-secrets-action@v1
        with:
            export-env: true # Export loaded secrets as environment variables
        env:
            OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
            SECRET: "op://rbiv7rvkkrsdlpcrz3bmv7nmcu/zmccajmekpljwy5udft22g5iby/credential"
            CREDENTIALS: "op://rbiv7rvkkrsdlpcrz3bmv7nmcu/ifkeehu5gzi7wy5ub5qvwkaire/credential"
            # op://<vault>/<item>[/<section>]/<field>  â€” Or right-click on the field and select copy secret reference

      - name: Checkout repo
        id: checkout_repo
        uses: actions/checkout@v4
        with:
            ref: main
            fetch-depth: 0
            token: ${{ env.CREDENTIALS }} 

      - name: Set up Git
        id: git-setup
        run: |
            git config user.name ${{ env.USERNAME }}
            git config user.email ${{ env.USERNAME_EMAIL }}

      - name: Setup Python
        uses: actions/setup-python@v4.7.0
        with:
          python-version: '3.11' # install the python version needed

    #   - name: Download CSV from Google Sheets
    #     id: download_csv
    #     shell: bash
    #     run: |
    #         # set -x
    #         CSV_DATA=$(curl -sL "https://docs.google.com/a/google.com/spreadsheets/d/1Q96KDppKsn2khdrkraZCQ7T_qRSfwj7WsvqXvuMt4Bc/gviz/tq?tq=select%20*&tqx=out:csv")

    #         IFS=$'\n'
    #         csv_data_no_headers=$(awk 'NR>1' <<< "${CSV_DATA}")
    #         declare -a csv_lines

    #         while IFS= read -r line; do
    #             csv_lines+=("$line")
    #         done <<< "$csv_data_no_headers"

    #         echo "CSVLINES=$csv_lines" >> $GITHUB_OUTPUT
            
    #         # set +x  # Disable debugging

      - name: Download CSV and process each lines
        id: process-csv
        shell: bash
        run: |
            # set -x
            # function to extract a date in the proper format for this script.
            extract_date() {
                # USAGE : date=$(extract_date "7/5/2023 15:50:58")
                #         echo "Extracted date: $date"
                local text="$1"
                local extracted_date=$(echo "$text" | grep -oE "${{ env.DATE_FORMAT }}" | head -1)
                
                if [[ $extracted_date =~ [0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
                    # Convert "yyyy-mm-dd" to "mm/dd/yyyy"
                    formatted_date=$(printf "%s" "$extracted_date" | awk -F"-" '{printf "%02d/%02d/%s", $2, $3, $1}')
                else
                    # Convert "m/d/yyyy" to "mm/dd/yyyy"
                    formatted_date=$(printf "%s" "$extracted_date" | awk -F"/" '{printf "%02d/%02d/%s", $1, $2, $3}')
                fi
            
                echo "$formatted_date"
            }

            CSV_DATA=$(curl -sL "https://docs.google.com/a/google.com/spreadsheets/d/1Q96KDppKsn2khdrkraZCQ7T_qRSfwj7WsvqXvuMt4Bc/gviz/tq?tq=select%20*&tqx=out:csv")

            IFS=$'\n'
            csv_data_no_headers=$(awk 'NR>1' <<< "${CSV_DATA}")
            declare -a csv_lines

            while IFS= read -r line; do
                extracted_date=$(extract_date "$line")
                if [[ "$extracted_date" == "${{ env.TODAYS_DATE }}" ]]; then
                    csv_lines+=("$line")
                fi
            done <<< "$csv_data_no_headers"

            # lines=$(echo "${{ steps.download_csv.outputs.CSVLINES }}" | jq -r .)

            for line in $csv_lines[@]; do
                IFS=','

                read -ra items_array <<< "$line"

                timestamp="${items_array[0]}"
                provider="${items_array[1]}"
                regioncity="${items_array[2]}"
                currenturl="${items_array[3]}"
                updatednewsourceurl="${items_array[4]}"
                datatype1="${items_array[5]}"
                request="${items_array[6]}"
                downloadurl="${items_array[7]}"
                country="${items_array[8]}"
                subdivision_name="${items_array[9]}"
                municipality="${items_array[10]}"
                name="${items_array[11]}"
                yournameorg="${items_array[12]}"
                license_url="${items_array[13]}"
                tripupdatesurl="${items_array[14]}"
                servicealertsurl="${items_array[15]}"
                genunknownrturl="${items_array[16]}"
                authentication_type="${items_array[17]}"
                authentication_info_url="${items_array[18]}"
                api_key_parameter_name="${items_array[19]}"
                note="${items_array[20]}"
                gtfsschedulefeatures="${items_array[21]}"
                gtfsschedulestatus="${items_array[22]}"
                gtfsrealtimestatus="${items_array[23]}"
                realtimefeatures="${items_array[26]}"

                # We need to extract a date from the first column to test against today's date.
                DATE_FROM_CSV=$(extract_date $timestamp)

                if [[ "$DATE_FROM_CSV" = "${{ env.TODAYS_DATE }}" ]]
                    then # ...the row has been added today, process it.
                        echo -e "FOUND ONE ROW ADDED TODAY: $provider"
                        # Default values for variables
                        PYTHON_SCRIPT_ARGS=""
                        PYTHON_SCRIPT_OUTPUT=""

                        # Create the argument string to send to the Python script
                        if [[ $issuetype = "New source" ]]
                        then
                            echo -e "   NEW SOURCE"

                            if [[ $datatype1 = *"Schedule"* ]]
                            then # add_gtfs_schedule_source

                                PYTHON_SCRIPT_ARGS="add_gtfs_schedule_source(provider='${provider}', country_code='${country}', direct_download_url='${tripupdatesurl}', authentication_type='${authentication_type}', authentication_info_url='${authentication_info_url}', api_key_parameter_name='${api_key_parameter_name}', subdivision_name='${subdivision_name}', municipality='${municipality}', license_url='${license_url}', name='${name}', status='${status1}', features='${features1}')"

                            elif [[ $datatype1 = *"Realtime"* ]]
                            then # add_gtfs_realtime_source
                                # Emma: entity_type matches the realtime Data type options of Vehicle Positions, Trip Updates, or Service Alerts.
                                # If one of those three are selected, add it. If not, omit it.

                                PYTHON_SCRIPT_ARGS="add_gtfs_realtime_source(entity_type=\"$datatype1\", provider=\"$provider\", direct_download_url=\"$tripupdatesurl\", authentication_type=\"$authentication_type\", authentication_info_url=\"$authentication_info_url\", api_key_parameter_name=\"$api_key_parameter_name\", license_url=\"$license_url\", name=\"$name\", static_reference=\"\", note=\"$note\", status=\"$status2\", features=\"$features2\")"
                            fi

                        elif [[ $issuetype = "Source update" ]]
                        then
                            echo -e "   SOURCE UPDATE"

                            if [[ $datatype1 = *"Schedule"* ]]
                            then # update_gtfs_schedule_source

                                PYTHON_SCRIPT_ARGS="update_gtfs_schedule_source(mdb_source_id=\"\", provider=\"$provider\", name=\"$name\", country_code=\"$country\", subdivision_name=\"$subdivision_name\", municipality=\"$municipality\", direct_download_url=\"$tripupdatesurl\", authentication_type=\"$authentication_type\", authentication_info_url=\"$authentication_info_url\", api_key_parameter_name=\"$api_key_parameter_name\", license_url=\"$license_url\", status=\"$status1\", features=\"$features1\")"

                            elif [[ $datatype1 = *"Realtime"* ]]
                            then # update_gtfs_realtime_source

                                PYTHON_SCRIPT_ARGS="update_gtfs_realtime_source(mdb_source_id=\"\", entity_type=\"$datatype1\", provider=\"$provider\", direct_download_url=\"$tripupdatesurl\", authentication_type=\"$authentication_type\", authentication_info_url=\"$authentication_info_url\", api_key_parameter_name=\"$api_key_parameter_name\", license_url=\"$license_url\", name=\"$name\", static_reference=\"TO_BE_PROVIDED\", note=\"$note\", status=\"$status2\", features=\"$features2\")"

                            fi

                        elif [[ $issuetype = *"removed"* ]]
                        then
                            echo -e "   REMOVING SOURCE"

                            # Emma: It's very rarely selected. In those cases, you could just update the name field of the feed "requested for removal" and I can decide what to do with it manually.

                                if [[ $datatype1 = *"Schedule"* ]]
                                then # update_gtfs_schedule_source

                                    PYTHON_SCRIPT_ARGS="update_gtfs_schedule_source(mdb_source_id=\"\", provider=\"$provider\", name=\"**** Requested for removal ****\", country_code=\"$country\", subdivision_name=\"$subdivision_name\", municipality=\"$municipality\", direct_download_url=\"$tripupdatesurl\", authentication_type=\"$authentication_type\", authentication_info_url=\"$authentication_info_url\", api_key_parameter_name=\"$api_key_parameter_name\", license_url=\"$license_url\", status=\"$status1\", features=\"$features1\")"

                                elif [[ $datatype1 = *"Realtime"* ]]
                                then # update_gtfs_realtime_source

                                    PYTHON_SCRIPT_ARGS="update_gtfs_realtime_source(mdb_source_id=\"\", entity_type=\"$datatype1\", provider=\"$provider\", direct_download_url=\"$tripupdatesurl\", authentication_type=\"$authentication_type\", authentication_info_url=\"$authentication_info_url\", api_key_parameter_name=\"$api_key_parameter_name\", license_url=\"$license_url\", name=\"**** Requested for removal ****\", static_reference=\"TO_BE_PROVIDED\", note=\"$note\", status=\"$status2\", features=\"$features2\")"

                                fi

                        else # ... assume this is a new source by default :: add_gtfs_schedule_source
                            echo -e "   ASSUMING DEFAULT, NEW SOURCE"

                            PYTHON_SCRIPT_ARGS="add_gtfs_schedule_source(provider=${provider}, country_code=${country}, direct_download_url=${tripupdatesurl}, authentication_type=${authentication_type}, authentication_info_url=${authentication_info_url}, api_key_parameter_name=${api_key_parameter_name}, subdivision_name=${subdivision_name}, municipality=${municipality}, license_url=${license_url}, name=${name}, status=${gtfsschedulestatus}, features=${gtfsschedulefeatures})"

                        fi

                        

                # Activate the Python virtual environment
                    fi # END ...the row has been added today, process it.

            done # end loop

            echo "PYTHON_SCRIPT_ARGS=${PYTHON_SCRIPT_ARGS}" >> $GITHUB_OUTPUT
            # set +x

      - name: Create new branch
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        shell: bash
        run: |
            git checkout -b "${{ env.BRANCH }}"
            cd tools/
            echo "$PWD"

      - name: Install python packages
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        shell: bash
        run: |
            # python -m pip install --upgrade pip
            pip install virtualenv --quiet
            pip install gtfs_kit --quiet
            pip install unidecode --quiet

      - name: Create and activate a Python virtual environment
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        shell: bash
        run: |
            python -m venv env
            source env/bin/activate
            pip install virtualenv --quiet
            pip install gtfs_kit --quiet
            pip install unidecode --quiet
            cd tools/
            echo "$PWD"

      - name: Run Python Script
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        uses: jannekem/run-python-script-action@v1.6
        with:
            script: |
                import sys
                sys.path.append('/home/runner/work/mobility-database-catalogs-fork/mobility-database-catalogs-fork/tools')
                from operations import *
                ${{ steps.process-csv.outputs.PYTHON_SCRIPT_ARGS }}

      - name: Commit
        if: steps.process-csv.outputs.PYTHON_SCRIPT_ARGS != ''
        shell: bash
        run: |
            echo "$PWD"
            git add .
            git commit -m "Automated commit â€” New/Updated feed"
            git push origin "${{ env.BRANCH }}"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5.0.2
        with:
            token: ${{ env.CREDENTIALS }}
            title: "new JSON"
            commit-message: "New JSON"
            body: "body"
            author: "${{ env.USERNAME }} <${{ env.USERNAME_EMAIL }}>"
            reviewers: ${{ env.REVIEWERS_JSON }}
            branch: ${{ env.BRANCH }}
            base: ${{ env.BASE }}
            add-paths: |
                catalogs/sources/gtfs/*.json

    #   - name: Deactivate virtual environment
    #     shell: bash
    #     run: |
    #       deactivate